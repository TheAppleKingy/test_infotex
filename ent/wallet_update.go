// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"test_infotex/ent/predicate"
	"test_infotex/ent/transaction"
	"test_infotex/ent/wallet"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WalletUpdate is the builder for updating Wallet entities.
type WalletUpdate struct {
	config
	hooks    []Hook
	mutation *WalletMutation
}

// Where appends a list predicates to the WalletUpdate builder.
func (wu *WalletUpdate) Where(ps ...predicate.Wallet) *WalletUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetBalance sets the "balance" field.
func (wu *WalletUpdate) SetBalance(u uint) *WalletUpdate {
	wu.mutation.ResetBalance()
	wu.mutation.SetBalance(u)
	return wu
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (wu *WalletUpdate) SetNillableBalance(u *uint) *WalletUpdate {
	if u != nil {
		wu.SetBalance(*u)
	}
	return wu
}

// AddBalance adds u to the "balance" field.
func (wu *WalletUpdate) AddBalance(u int) *WalletUpdate {
	wu.mutation.AddBalance(u)
	return wu
}

// AddSentTransactionIDs adds the "sent_transactions" edge to the Transaction entity by IDs.
func (wu *WalletUpdate) AddSentTransactionIDs(ids ...int) *WalletUpdate {
	wu.mutation.AddSentTransactionIDs(ids...)
	return wu
}

// AddSentTransactions adds the "sent_transactions" edges to the Transaction entity.
func (wu *WalletUpdate) AddSentTransactions(t ...*Transaction) *WalletUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wu.AddSentTransactionIDs(ids...)
}

// AddRecievedTransactionIDs adds the "recieved_transactions" edge to the Transaction entity by IDs.
func (wu *WalletUpdate) AddRecievedTransactionIDs(ids ...int) *WalletUpdate {
	wu.mutation.AddRecievedTransactionIDs(ids...)
	return wu
}

// AddRecievedTransactions adds the "recieved_transactions" edges to the Transaction entity.
func (wu *WalletUpdate) AddRecievedTransactions(t ...*Transaction) *WalletUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wu.AddRecievedTransactionIDs(ids...)
}

// Mutation returns the WalletMutation object of the builder.
func (wu *WalletUpdate) Mutation() *WalletMutation {
	return wu.mutation
}

// ClearSentTransactions clears all "sent_transactions" edges to the Transaction entity.
func (wu *WalletUpdate) ClearSentTransactions() *WalletUpdate {
	wu.mutation.ClearSentTransactions()
	return wu
}

// RemoveSentTransactionIDs removes the "sent_transactions" edge to Transaction entities by IDs.
func (wu *WalletUpdate) RemoveSentTransactionIDs(ids ...int) *WalletUpdate {
	wu.mutation.RemoveSentTransactionIDs(ids...)
	return wu
}

// RemoveSentTransactions removes "sent_transactions" edges to Transaction entities.
func (wu *WalletUpdate) RemoveSentTransactions(t ...*Transaction) *WalletUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wu.RemoveSentTransactionIDs(ids...)
}

// ClearRecievedTransactions clears all "recieved_transactions" edges to the Transaction entity.
func (wu *WalletUpdate) ClearRecievedTransactions() *WalletUpdate {
	wu.mutation.ClearRecievedTransactions()
	return wu
}

// RemoveRecievedTransactionIDs removes the "recieved_transactions" edge to Transaction entities by IDs.
func (wu *WalletUpdate) RemoveRecievedTransactionIDs(ids ...int) *WalletUpdate {
	wu.mutation.RemoveRecievedTransactionIDs(ids...)
	return wu
}

// RemoveRecievedTransactions removes "recieved_transactions" edges to Transaction entities.
func (wu *WalletUpdate) RemoveRecievedTransactions(t ...*Transaction) *WalletUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wu.RemoveRecievedTransactionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WalletUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WalletUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WalletUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WalletUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wu *WalletUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(wallet.Table, wallet.Columns, sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.Balance(); ok {
		_spec.SetField(wallet.FieldBalance, field.TypeUint, value)
	}
	if value, ok := wu.mutation.AddedBalance(); ok {
		_spec.AddField(wallet.FieldBalance, field.TypeUint, value)
	}
	if wu.mutation.SentTransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wallet.SentTransactionsTable,
			Columns: []string{wallet.SentTransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedSentTransactionsIDs(); len(nodes) > 0 && !wu.mutation.SentTransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wallet.SentTransactionsTable,
			Columns: []string{wallet.SentTransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.SentTransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wallet.SentTransactionsTable,
			Columns: []string{wallet.SentTransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.RecievedTransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wallet.RecievedTransactionsTable,
			Columns: []string{wallet.RecievedTransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedRecievedTransactionsIDs(); len(nodes) > 0 && !wu.mutation.RecievedTransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wallet.RecievedTransactionsTable,
			Columns: []string{wallet.RecievedTransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RecievedTransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wallet.RecievedTransactionsTable,
			Columns: []string{wallet.RecievedTransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wallet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WalletUpdateOne is the builder for updating a single Wallet entity.
type WalletUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WalletMutation
}

// SetBalance sets the "balance" field.
func (wuo *WalletUpdateOne) SetBalance(u uint) *WalletUpdateOne {
	wuo.mutation.ResetBalance()
	wuo.mutation.SetBalance(u)
	return wuo
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (wuo *WalletUpdateOne) SetNillableBalance(u *uint) *WalletUpdateOne {
	if u != nil {
		wuo.SetBalance(*u)
	}
	return wuo
}

// AddBalance adds u to the "balance" field.
func (wuo *WalletUpdateOne) AddBalance(u int) *WalletUpdateOne {
	wuo.mutation.AddBalance(u)
	return wuo
}

// AddSentTransactionIDs adds the "sent_transactions" edge to the Transaction entity by IDs.
func (wuo *WalletUpdateOne) AddSentTransactionIDs(ids ...int) *WalletUpdateOne {
	wuo.mutation.AddSentTransactionIDs(ids...)
	return wuo
}

// AddSentTransactions adds the "sent_transactions" edges to the Transaction entity.
func (wuo *WalletUpdateOne) AddSentTransactions(t ...*Transaction) *WalletUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wuo.AddSentTransactionIDs(ids...)
}

// AddRecievedTransactionIDs adds the "recieved_transactions" edge to the Transaction entity by IDs.
func (wuo *WalletUpdateOne) AddRecievedTransactionIDs(ids ...int) *WalletUpdateOne {
	wuo.mutation.AddRecievedTransactionIDs(ids...)
	return wuo
}

// AddRecievedTransactions adds the "recieved_transactions" edges to the Transaction entity.
func (wuo *WalletUpdateOne) AddRecievedTransactions(t ...*Transaction) *WalletUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wuo.AddRecievedTransactionIDs(ids...)
}

// Mutation returns the WalletMutation object of the builder.
func (wuo *WalletUpdateOne) Mutation() *WalletMutation {
	return wuo.mutation
}

// ClearSentTransactions clears all "sent_transactions" edges to the Transaction entity.
func (wuo *WalletUpdateOne) ClearSentTransactions() *WalletUpdateOne {
	wuo.mutation.ClearSentTransactions()
	return wuo
}

// RemoveSentTransactionIDs removes the "sent_transactions" edge to Transaction entities by IDs.
func (wuo *WalletUpdateOne) RemoveSentTransactionIDs(ids ...int) *WalletUpdateOne {
	wuo.mutation.RemoveSentTransactionIDs(ids...)
	return wuo
}

// RemoveSentTransactions removes "sent_transactions" edges to Transaction entities.
func (wuo *WalletUpdateOne) RemoveSentTransactions(t ...*Transaction) *WalletUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wuo.RemoveSentTransactionIDs(ids...)
}

// ClearRecievedTransactions clears all "recieved_transactions" edges to the Transaction entity.
func (wuo *WalletUpdateOne) ClearRecievedTransactions() *WalletUpdateOne {
	wuo.mutation.ClearRecievedTransactions()
	return wuo
}

// RemoveRecievedTransactionIDs removes the "recieved_transactions" edge to Transaction entities by IDs.
func (wuo *WalletUpdateOne) RemoveRecievedTransactionIDs(ids ...int) *WalletUpdateOne {
	wuo.mutation.RemoveRecievedTransactionIDs(ids...)
	return wuo
}

// RemoveRecievedTransactions removes "recieved_transactions" edges to Transaction entities.
func (wuo *WalletUpdateOne) RemoveRecievedTransactions(t ...*Transaction) *WalletUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wuo.RemoveRecievedTransactionIDs(ids...)
}

// Where appends a list predicates to the WalletUpdate builder.
func (wuo *WalletUpdateOne) Where(ps ...predicate.Wallet) *WalletUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WalletUpdateOne) Select(field string, fields ...string) *WalletUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Wallet entity.
func (wuo *WalletUpdateOne) Save(ctx context.Context) (*Wallet, error) {
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WalletUpdateOne) SaveX(ctx context.Context) *Wallet {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WalletUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WalletUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wuo *WalletUpdateOne) sqlSave(ctx context.Context) (_node *Wallet, err error) {
	_spec := sqlgraph.NewUpdateSpec(wallet.Table, wallet.Columns, sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Wallet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, wallet.FieldID)
		for _, f := range fields {
			if !wallet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != wallet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.Balance(); ok {
		_spec.SetField(wallet.FieldBalance, field.TypeUint, value)
	}
	if value, ok := wuo.mutation.AddedBalance(); ok {
		_spec.AddField(wallet.FieldBalance, field.TypeUint, value)
	}
	if wuo.mutation.SentTransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wallet.SentTransactionsTable,
			Columns: []string{wallet.SentTransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedSentTransactionsIDs(); len(nodes) > 0 && !wuo.mutation.SentTransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wallet.SentTransactionsTable,
			Columns: []string{wallet.SentTransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.SentTransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wallet.SentTransactionsTable,
			Columns: []string{wallet.SentTransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.RecievedTransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wallet.RecievedTransactionsTable,
			Columns: []string{wallet.RecievedTransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedRecievedTransactionsIDs(); len(nodes) > 0 && !wuo.mutation.RecievedTransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wallet.RecievedTransactionsTable,
			Columns: []string{wallet.RecievedTransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RecievedTransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wallet.RecievedTransactionsTable,
			Columns: []string{wallet.RecievedTransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Wallet{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wallet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
