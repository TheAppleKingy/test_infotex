// Code generated by ent, DO NOT EDIT.

package wallet

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the wallet type in the database.
	Label = "wallet"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldBalance holds the string denoting the balance field in the database.
	FieldBalance = "balance"
	// EdgeSentTransactions holds the string denoting the sent_transactions edge name in mutations.
	EdgeSentTransactions = "sent_transactions"
	// EdgeRecievedTransactions holds the string denoting the recieved_transactions edge name in mutations.
	EdgeRecievedTransactions = "recieved_transactions"
	// Table holds the table name of the wallet in the database.
	Table = "wallets"
	// SentTransactionsTable is the table that holds the sent_transactions relation/edge.
	SentTransactionsTable = "transactions"
	// SentTransactionsInverseTable is the table name for the Transaction entity.
	// It exists in this package in order to avoid circular dependency with the "transaction" package.
	SentTransactionsInverseTable = "transactions"
	// SentTransactionsColumn is the table column denoting the sent_transactions relation/edge.
	SentTransactionsColumn = "from_wallet_id"
	// RecievedTransactionsTable is the table that holds the recieved_transactions relation/edge.
	RecievedTransactionsTable = "transactions"
	// RecievedTransactionsInverseTable is the table name for the Transaction entity.
	// It exists in this package in order to avoid circular dependency with the "transaction" package.
	RecievedTransactionsInverseTable = "transactions"
	// RecievedTransactionsColumn is the table column denoting the recieved_transactions relation/edge.
	RecievedTransactionsColumn = "to_wallet_id"
)

// Columns holds all SQL columns for wallet fields.
var Columns = []string{
	FieldID,
	FieldAddress,
	FieldBalance,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// AddressValidator is a validator for the "address" field. It is called by the builders before save.
	AddressValidator func(string) error
	// BalanceValidator is a validator for the "balance" field. It is called by the builders before save.
	BalanceValidator func(int) error
)

// OrderOption defines the ordering options for the Wallet queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByBalance orders the results by the balance field.
func ByBalance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBalance, opts...).ToFunc()
}

// BySentTransactionsCount orders the results by sent_transactions count.
func BySentTransactionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSentTransactionsStep(), opts...)
	}
}

// BySentTransactions orders the results by sent_transactions terms.
func BySentTransactions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSentTransactionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRecievedTransactionsCount orders the results by recieved_transactions count.
func ByRecievedTransactionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRecievedTransactionsStep(), opts...)
	}
}

// ByRecievedTransactions orders the results by recieved_transactions terms.
func ByRecievedTransactions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRecievedTransactionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSentTransactionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SentTransactionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SentTransactionsTable, SentTransactionsColumn),
	)
}
func newRecievedTransactionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RecievedTransactionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RecievedTransactionsTable, RecievedTransactionsColumn),
	)
}
