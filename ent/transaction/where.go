// Code generated by ent, DO NOT EDIT.

package transaction

import (
	"test_infotex/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldID, id))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldAmount, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldCreatedAt, v))
}

// FromWalletID applies equality check predicate on the "from_wallet_id" field. It's identical to FromWalletIDEQ.
func FromWalletID(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldFromWalletID, v))
}

// ToWalletID applies equality check predicate on the "to_wallet_id" field. It's identical to ToWalletIDEQ.
func ToWalletID(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldToWalletID, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldAmount, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldCreatedAt, v))
}

// FromWalletIDEQ applies the EQ predicate on the "from_wallet_id" field.
func FromWalletIDEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldFromWalletID, v))
}

// FromWalletIDNEQ applies the NEQ predicate on the "from_wallet_id" field.
func FromWalletIDNEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldFromWalletID, v))
}

// FromWalletIDIn applies the In predicate on the "from_wallet_id" field.
func FromWalletIDIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldFromWalletID, vs...))
}

// FromWalletIDNotIn applies the NotIn predicate on the "from_wallet_id" field.
func FromWalletIDNotIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldFromWalletID, vs...))
}

// ToWalletIDEQ applies the EQ predicate on the "to_wallet_id" field.
func ToWalletIDEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldToWalletID, v))
}

// ToWalletIDNEQ applies the NEQ predicate on the "to_wallet_id" field.
func ToWalletIDNEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldToWalletID, v))
}

// ToWalletIDIn applies the In predicate on the "to_wallet_id" field.
func ToWalletIDIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldToWalletID, vs...))
}

// ToWalletIDNotIn applies the NotIn predicate on the "to_wallet_id" field.
func ToWalletIDNotIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldToWalletID, vs...))
}

// HasFromWallet applies the HasEdge predicate on the "from_wallet" edge.
func HasFromWallet() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FromWalletTable, FromWalletColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFromWalletWith applies the HasEdge predicate on the "from_wallet" edge with a given conditions (other predicates).
func HasFromWalletWith(preds ...predicate.Wallet) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := newFromWalletStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasToWallet applies the HasEdge predicate on the "to_wallet" edge.
func HasToWallet() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ToWalletTable, ToWalletColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasToWalletWith applies the HasEdge predicate on the "to_wallet" edge with a given conditions (other predicates).
func HasToWalletWith(preds ...predicate.Wallet) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := newToWalletStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.NotPredicates(p))
}
