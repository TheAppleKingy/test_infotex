// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"test_infotex/ent/predicate"
	"test_infotex/ent/transaction"
	"test_infotex/ent/wallet"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeTransaction = "Transaction"
	TypeWallet      = "Wallet"
)

// TransactionMutation represents an operation that mutates the Transaction nodes in the graph.
type TransactionMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	amount             *int
	addamount          *int
	created_at         *time.Time
	clearedFields      map[string]struct{}
	from_wallet        *int
	clearedfrom_wallet bool
	to_wallet          *int
	clearedto_wallet   bool
	done               bool
	oldValue           func(context.Context) (*Transaction, error)
	predicates         []predicate.Transaction
}

var _ ent.Mutation = (*TransactionMutation)(nil)

// transactionOption allows management of the mutation configuration using functional options.
type transactionOption func(*TransactionMutation)

// newTransactionMutation creates new mutation for the Transaction entity.
func newTransactionMutation(c config, op Op, opts ...transactionOption) *TransactionMutation {
	m := &TransactionMutation{
		config:        c,
		op:            op,
		typ:           TypeTransaction,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTransactionID sets the ID field of the mutation.
func withTransactionID(id int) transactionOption {
	return func(m *TransactionMutation) {
		var (
			err   error
			once  sync.Once
			value *Transaction
		)
		m.oldValue = func(ctx context.Context) (*Transaction, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Transaction.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTransaction sets the old Transaction of the mutation.
func withTransaction(node *Transaction) transactionOption {
	return func(m *TransactionMutation) {
		m.oldValue = func(context.Context) (*Transaction, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TransactionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TransactionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TransactionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TransactionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Transaction.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAmount sets the "amount" field.
func (m *TransactionMutation) SetAmount(i int) {
	m.amount = &i
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *TransactionMutation) Amount() (r int, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldAmount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds i to the "amount" field.
func (m *TransactionMutation) AddAmount(i int) {
	if m.addamount != nil {
		*m.addamount += i
	} else {
		m.addamount = &i
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *TransactionMutation) AddedAmount() (r int, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *TransactionMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TransactionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TransactionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TransactionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetFromWalletID sets the "from_wallet_id" field.
func (m *TransactionMutation) SetFromWalletID(i int) {
	m.from_wallet = &i
}

// FromWalletID returns the value of the "from_wallet_id" field in the mutation.
func (m *TransactionMutation) FromWalletID() (r int, exists bool) {
	v := m.from_wallet
	if v == nil {
		return
	}
	return *v, true
}

// OldFromWalletID returns the old "from_wallet_id" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldFromWalletID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFromWalletID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFromWalletID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFromWalletID: %w", err)
	}
	return oldValue.FromWalletID, nil
}

// ResetFromWalletID resets all changes to the "from_wallet_id" field.
func (m *TransactionMutation) ResetFromWalletID() {
	m.from_wallet = nil
}

// SetToWalletID sets the "to_wallet_id" field.
func (m *TransactionMutation) SetToWalletID(i int) {
	m.to_wallet = &i
}

// ToWalletID returns the value of the "to_wallet_id" field in the mutation.
func (m *TransactionMutation) ToWalletID() (r int, exists bool) {
	v := m.to_wallet
	if v == nil {
		return
	}
	return *v, true
}

// OldToWalletID returns the old "to_wallet_id" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldToWalletID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToWalletID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToWalletID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToWalletID: %w", err)
	}
	return oldValue.ToWalletID, nil
}

// ResetToWalletID resets all changes to the "to_wallet_id" field.
func (m *TransactionMutation) ResetToWalletID() {
	m.to_wallet = nil
}

// ClearFromWallet clears the "from_wallet" edge to the Wallet entity.
func (m *TransactionMutation) ClearFromWallet() {
	m.clearedfrom_wallet = true
	m.clearedFields[transaction.FieldFromWalletID] = struct{}{}
}

// FromWalletCleared reports if the "from_wallet" edge to the Wallet entity was cleared.
func (m *TransactionMutation) FromWalletCleared() bool {
	return m.clearedfrom_wallet
}

// FromWalletIDs returns the "from_wallet" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FromWalletID instead. It exists only for internal usage by the builders.
func (m *TransactionMutation) FromWalletIDs() (ids []int) {
	if id := m.from_wallet; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFromWallet resets all changes to the "from_wallet" edge.
func (m *TransactionMutation) ResetFromWallet() {
	m.from_wallet = nil
	m.clearedfrom_wallet = false
}

// ClearToWallet clears the "to_wallet" edge to the Wallet entity.
func (m *TransactionMutation) ClearToWallet() {
	m.clearedto_wallet = true
	m.clearedFields[transaction.FieldToWalletID] = struct{}{}
}

// ToWalletCleared reports if the "to_wallet" edge to the Wallet entity was cleared.
func (m *TransactionMutation) ToWalletCleared() bool {
	return m.clearedto_wallet
}

// ToWalletIDs returns the "to_wallet" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ToWalletID instead. It exists only for internal usage by the builders.
func (m *TransactionMutation) ToWalletIDs() (ids []int) {
	if id := m.to_wallet; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetToWallet resets all changes to the "to_wallet" edge.
func (m *TransactionMutation) ResetToWallet() {
	m.to_wallet = nil
	m.clearedto_wallet = false
}

// Where appends a list predicates to the TransactionMutation builder.
func (m *TransactionMutation) Where(ps ...predicate.Transaction) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TransactionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TransactionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Transaction, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TransactionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TransactionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Transaction).
func (m *TransactionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TransactionMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.amount != nil {
		fields = append(fields, transaction.FieldAmount)
	}
	if m.created_at != nil {
		fields = append(fields, transaction.FieldCreatedAt)
	}
	if m.from_wallet != nil {
		fields = append(fields, transaction.FieldFromWalletID)
	}
	if m.to_wallet != nil {
		fields = append(fields, transaction.FieldToWalletID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TransactionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case transaction.FieldAmount:
		return m.Amount()
	case transaction.FieldCreatedAt:
		return m.CreatedAt()
	case transaction.FieldFromWalletID:
		return m.FromWalletID()
	case transaction.FieldToWalletID:
		return m.ToWalletID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TransactionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case transaction.FieldAmount:
		return m.OldAmount(ctx)
	case transaction.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case transaction.FieldFromWalletID:
		return m.OldFromWalletID(ctx)
	case transaction.FieldToWalletID:
		return m.OldToWalletID(ctx)
	}
	return nil, fmt.Errorf("unknown Transaction field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TransactionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case transaction.FieldAmount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case transaction.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case transaction.FieldFromWalletID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFromWalletID(v)
		return nil
	case transaction.FieldToWalletID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToWalletID(v)
		return nil
	}
	return fmt.Errorf("unknown Transaction field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TransactionMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, transaction.FieldAmount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TransactionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case transaction.FieldAmount:
		return m.AddedAmount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TransactionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case transaction.FieldAmount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	}
	return fmt.Errorf("unknown Transaction numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TransactionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TransactionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TransactionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Transaction nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TransactionMutation) ResetField(name string) error {
	switch name {
	case transaction.FieldAmount:
		m.ResetAmount()
		return nil
	case transaction.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case transaction.FieldFromWalletID:
		m.ResetFromWalletID()
		return nil
	case transaction.FieldToWalletID:
		m.ResetToWalletID()
		return nil
	}
	return fmt.Errorf("unknown Transaction field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TransactionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.from_wallet != nil {
		edges = append(edges, transaction.EdgeFromWallet)
	}
	if m.to_wallet != nil {
		edges = append(edges, transaction.EdgeToWallet)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TransactionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case transaction.EdgeFromWallet:
		if id := m.from_wallet; id != nil {
			return []ent.Value{*id}
		}
	case transaction.EdgeToWallet:
		if id := m.to_wallet; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TransactionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TransactionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TransactionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedfrom_wallet {
		edges = append(edges, transaction.EdgeFromWallet)
	}
	if m.clearedto_wallet {
		edges = append(edges, transaction.EdgeToWallet)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TransactionMutation) EdgeCleared(name string) bool {
	switch name {
	case transaction.EdgeFromWallet:
		return m.clearedfrom_wallet
	case transaction.EdgeToWallet:
		return m.clearedto_wallet
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TransactionMutation) ClearEdge(name string) error {
	switch name {
	case transaction.EdgeFromWallet:
		m.ClearFromWallet()
		return nil
	case transaction.EdgeToWallet:
		m.ClearToWallet()
		return nil
	}
	return fmt.Errorf("unknown Transaction unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TransactionMutation) ResetEdge(name string) error {
	switch name {
	case transaction.EdgeFromWallet:
		m.ResetFromWallet()
		return nil
	case transaction.EdgeToWallet:
		m.ResetToWallet()
		return nil
	}
	return fmt.Errorf("unknown Transaction edge %s", name)
}

// WalletMutation represents an operation that mutates the Wallet nodes in the graph.
type WalletMutation struct {
	config
	op                           Op
	typ                          string
	id                           *int
	address                      *string
	balance                      *int
	addbalance                   *int
	clearedFields                map[string]struct{}
	sent_transactions            map[int]struct{}
	removedsent_transactions     map[int]struct{}
	clearedsent_transactions     bool
	recieved_transactions        map[int]struct{}
	removedrecieved_transactions map[int]struct{}
	clearedrecieved_transactions bool
	done                         bool
	oldValue                     func(context.Context) (*Wallet, error)
	predicates                   []predicate.Wallet
}

var _ ent.Mutation = (*WalletMutation)(nil)

// walletOption allows management of the mutation configuration using functional options.
type walletOption func(*WalletMutation)

// newWalletMutation creates new mutation for the Wallet entity.
func newWalletMutation(c config, op Op, opts ...walletOption) *WalletMutation {
	m := &WalletMutation{
		config:        c,
		op:            op,
		typ:           TypeWallet,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWalletID sets the ID field of the mutation.
func withWalletID(id int) walletOption {
	return func(m *WalletMutation) {
		var (
			err   error
			once  sync.Once
			value *Wallet
		)
		m.oldValue = func(ctx context.Context) (*Wallet, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Wallet.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWallet sets the old Wallet of the mutation.
func withWallet(node *Wallet) walletOption {
	return func(m *WalletMutation) {
		m.oldValue = func(context.Context) (*Wallet, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WalletMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WalletMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WalletMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WalletMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Wallet.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAddress sets the "address" field.
func (m *WalletMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *WalletMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *WalletMutation) ResetAddress() {
	m.address = nil
}

// SetBalance sets the "balance" field.
func (m *WalletMutation) SetBalance(i int) {
	m.balance = &i
	m.addbalance = nil
}

// Balance returns the value of the "balance" field in the mutation.
func (m *WalletMutation) Balance() (r int, exists bool) {
	v := m.balance
	if v == nil {
		return
	}
	return *v, true
}

// OldBalance returns the old "balance" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldBalance(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBalance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBalance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBalance: %w", err)
	}
	return oldValue.Balance, nil
}

// AddBalance adds i to the "balance" field.
func (m *WalletMutation) AddBalance(i int) {
	if m.addbalance != nil {
		*m.addbalance += i
	} else {
		m.addbalance = &i
	}
}

// AddedBalance returns the value that was added to the "balance" field in this mutation.
func (m *WalletMutation) AddedBalance() (r int, exists bool) {
	v := m.addbalance
	if v == nil {
		return
	}
	return *v, true
}

// ResetBalance resets all changes to the "balance" field.
func (m *WalletMutation) ResetBalance() {
	m.balance = nil
	m.addbalance = nil
}

// AddSentTransactionIDs adds the "sent_transactions" edge to the Transaction entity by ids.
func (m *WalletMutation) AddSentTransactionIDs(ids ...int) {
	if m.sent_transactions == nil {
		m.sent_transactions = make(map[int]struct{})
	}
	for i := range ids {
		m.sent_transactions[ids[i]] = struct{}{}
	}
}

// ClearSentTransactions clears the "sent_transactions" edge to the Transaction entity.
func (m *WalletMutation) ClearSentTransactions() {
	m.clearedsent_transactions = true
}

// SentTransactionsCleared reports if the "sent_transactions" edge to the Transaction entity was cleared.
func (m *WalletMutation) SentTransactionsCleared() bool {
	return m.clearedsent_transactions
}

// RemoveSentTransactionIDs removes the "sent_transactions" edge to the Transaction entity by IDs.
func (m *WalletMutation) RemoveSentTransactionIDs(ids ...int) {
	if m.removedsent_transactions == nil {
		m.removedsent_transactions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.sent_transactions, ids[i])
		m.removedsent_transactions[ids[i]] = struct{}{}
	}
}

// RemovedSentTransactions returns the removed IDs of the "sent_transactions" edge to the Transaction entity.
func (m *WalletMutation) RemovedSentTransactionsIDs() (ids []int) {
	for id := range m.removedsent_transactions {
		ids = append(ids, id)
	}
	return
}

// SentTransactionsIDs returns the "sent_transactions" edge IDs in the mutation.
func (m *WalletMutation) SentTransactionsIDs() (ids []int) {
	for id := range m.sent_transactions {
		ids = append(ids, id)
	}
	return
}

// ResetSentTransactions resets all changes to the "sent_transactions" edge.
func (m *WalletMutation) ResetSentTransactions() {
	m.sent_transactions = nil
	m.clearedsent_transactions = false
	m.removedsent_transactions = nil
}

// AddRecievedTransactionIDs adds the "recieved_transactions" edge to the Transaction entity by ids.
func (m *WalletMutation) AddRecievedTransactionIDs(ids ...int) {
	if m.recieved_transactions == nil {
		m.recieved_transactions = make(map[int]struct{})
	}
	for i := range ids {
		m.recieved_transactions[ids[i]] = struct{}{}
	}
}

// ClearRecievedTransactions clears the "recieved_transactions" edge to the Transaction entity.
func (m *WalletMutation) ClearRecievedTransactions() {
	m.clearedrecieved_transactions = true
}

// RecievedTransactionsCleared reports if the "recieved_transactions" edge to the Transaction entity was cleared.
func (m *WalletMutation) RecievedTransactionsCleared() bool {
	return m.clearedrecieved_transactions
}

// RemoveRecievedTransactionIDs removes the "recieved_transactions" edge to the Transaction entity by IDs.
func (m *WalletMutation) RemoveRecievedTransactionIDs(ids ...int) {
	if m.removedrecieved_transactions == nil {
		m.removedrecieved_transactions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.recieved_transactions, ids[i])
		m.removedrecieved_transactions[ids[i]] = struct{}{}
	}
}

// RemovedRecievedTransactions returns the removed IDs of the "recieved_transactions" edge to the Transaction entity.
func (m *WalletMutation) RemovedRecievedTransactionsIDs() (ids []int) {
	for id := range m.removedrecieved_transactions {
		ids = append(ids, id)
	}
	return
}

// RecievedTransactionsIDs returns the "recieved_transactions" edge IDs in the mutation.
func (m *WalletMutation) RecievedTransactionsIDs() (ids []int) {
	for id := range m.recieved_transactions {
		ids = append(ids, id)
	}
	return
}

// ResetRecievedTransactions resets all changes to the "recieved_transactions" edge.
func (m *WalletMutation) ResetRecievedTransactions() {
	m.recieved_transactions = nil
	m.clearedrecieved_transactions = false
	m.removedrecieved_transactions = nil
}

// Where appends a list predicates to the WalletMutation builder.
func (m *WalletMutation) Where(ps ...predicate.Wallet) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WalletMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WalletMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Wallet, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WalletMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WalletMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Wallet).
func (m *WalletMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WalletMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.address != nil {
		fields = append(fields, wallet.FieldAddress)
	}
	if m.balance != nil {
		fields = append(fields, wallet.FieldBalance)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WalletMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case wallet.FieldAddress:
		return m.Address()
	case wallet.FieldBalance:
		return m.Balance()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WalletMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case wallet.FieldAddress:
		return m.OldAddress(ctx)
	case wallet.FieldBalance:
		return m.OldBalance(ctx)
	}
	return nil, fmt.Errorf("unknown Wallet field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WalletMutation) SetField(name string, value ent.Value) error {
	switch name {
	case wallet.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case wallet.FieldBalance:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBalance(v)
		return nil
	}
	return fmt.Errorf("unknown Wallet field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WalletMutation) AddedFields() []string {
	var fields []string
	if m.addbalance != nil {
		fields = append(fields, wallet.FieldBalance)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WalletMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case wallet.FieldBalance:
		return m.AddedBalance()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WalletMutation) AddField(name string, value ent.Value) error {
	switch name {
	case wallet.FieldBalance:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBalance(v)
		return nil
	}
	return fmt.Errorf("unknown Wallet numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WalletMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WalletMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WalletMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Wallet nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WalletMutation) ResetField(name string) error {
	switch name {
	case wallet.FieldAddress:
		m.ResetAddress()
		return nil
	case wallet.FieldBalance:
		m.ResetBalance()
		return nil
	}
	return fmt.Errorf("unknown Wallet field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WalletMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.sent_transactions != nil {
		edges = append(edges, wallet.EdgeSentTransactions)
	}
	if m.recieved_transactions != nil {
		edges = append(edges, wallet.EdgeRecievedTransactions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WalletMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case wallet.EdgeSentTransactions:
		ids := make([]ent.Value, 0, len(m.sent_transactions))
		for id := range m.sent_transactions {
			ids = append(ids, id)
		}
		return ids
	case wallet.EdgeRecievedTransactions:
		ids := make([]ent.Value, 0, len(m.recieved_transactions))
		for id := range m.recieved_transactions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WalletMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedsent_transactions != nil {
		edges = append(edges, wallet.EdgeSentTransactions)
	}
	if m.removedrecieved_transactions != nil {
		edges = append(edges, wallet.EdgeRecievedTransactions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WalletMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case wallet.EdgeSentTransactions:
		ids := make([]ent.Value, 0, len(m.removedsent_transactions))
		for id := range m.removedsent_transactions {
			ids = append(ids, id)
		}
		return ids
	case wallet.EdgeRecievedTransactions:
		ids := make([]ent.Value, 0, len(m.removedrecieved_transactions))
		for id := range m.removedrecieved_transactions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WalletMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedsent_transactions {
		edges = append(edges, wallet.EdgeSentTransactions)
	}
	if m.clearedrecieved_transactions {
		edges = append(edges, wallet.EdgeRecievedTransactions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WalletMutation) EdgeCleared(name string) bool {
	switch name {
	case wallet.EdgeSentTransactions:
		return m.clearedsent_transactions
	case wallet.EdgeRecievedTransactions:
		return m.clearedrecieved_transactions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WalletMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Wallet unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WalletMutation) ResetEdge(name string) error {
	switch name {
	case wallet.EdgeSentTransactions:
		m.ResetSentTransactions()
		return nil
	case wallet.EdgeRecievedTransactions:
		m.ResetRecievedTransactions()
		return nil
	}
	return fmt.Errorf("unknown Wallet edge %s", name)
}
